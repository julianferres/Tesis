@inproceedings{10.1007/978-3-030-03427-6_27,
  author    = {Lamela Seijas, Pablo
               and Thompson, Simon},
  editor    = {Margaria, Tiziana
               and Steffen, Bernhard},
  title     = {Marlowe: Financial Contracts on Blockchain},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {356--375},
  abstract  = {Blockchains allow the specification of contracts in the form of programs that guarantee their fulfilment. Nevertheless, errors in those programs can cause important, and often irretrievable, monetary loss. General-purpose languages provide a platform on which contracts can be built, but by their very generality they have the potential to exhibit behaviours of an unpredictable kind, and are also not easy to read or comprehend for general users.},
  isbn      = {978-3-030-03427-6}
}
@inproceedings{10.1007/978-3-030-61467-6_11,
  author    = {Lamela Seijas, Pablo
               and Smith, David
               and Thompson, Simon},
  editor    = {Margaria, Tiziana
               and Steffen, Bernhard},
  title     = {Efficient Static Analysis of Marlowe Contracts},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation: Applications},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {161--177},
  abstract  = {SMT solvers can verify properties automatically and efficiently, and they offer increasing flexibility on the ways those properties can be described. But it is hard to predict how those ways of describing the properties affect the computational cost of verifying them.},
  isbn      = {978-3-030-61467-6}
}
@article{10.1145/3464421,
  author     = {Tolmach, Palina and Li, Yi and Lin, Shang-Wei and Liu, Yang and Li, Zengxiang},
  title      = {A Survey of Smart Contract Formal Specification and Verification},
  year       = {2021},
  issue_date = {July 2021},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {54},
  number     = {7},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/3464421},
  doi        = {10.1145/3464421},
  abstract   = {A smart contract is a computer program that allows users to automate their actions
                on the blockchain platform. Given the significance of smart contracts in supporting
                important activities across industry sectors including supply chain, finance, legal,
                and medical services, there is a strong demand for verification and validation techniques.
                Yet, the vast majority of smart contracts lack any kind of formal specification, which
                is essential for establishing their correctness. In this survey, we investigate formal
                models and specifications of smart contracts presented in the literature and present
                a systematic overview to understand the common trends. We also discuss the current
                approaches used in verifying such property specifications and identify gaps with the
                hope to recognize promising directions for future work.},
  journal    = {ACM Comput. Surv.},
  month      = jul,
  articleno  = {148},
  numpages   = {38},
  keywords   = {formal specification, Smart contract, properties, formal verification}
}
@inproceedings{9152791,
  author    = {Permenev, Anton and Dimitrov, Dimitar and Tsankov, Petar and Drachsler-Cohen, Dana and Vechev, Martin},
  booktitle = {2020 IEEE Symposium on Security and Privacy (SP)},
  title     = {VerX: Safety Verification of Smart Contracts},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {1661-1677},
  doi       = {10.1109/SP40000.2020.00024}
}
@misc{ACTUS_Dictionary_Events,
  author       = {ACTUS},
  note         = {Online; accessed 17 April 2022},
  year         = {2019},
  month        = Aug,
  title        = {ACTUS Dictionary Events},
  howpublished = {\url{https://github.com/actusfrf/actus-dictionary/blob/master/actus-dictionary-event-types.json}}
}
@misc{ACTUS_Dictionary_States,
  author       = {ACTUS},
  title        = {ACTUS Dictionary States},
  year         = {2019},
  month        = Jun,
  howpublished = {\url{https://github.com/actusfrf/actus-dictionary/blob/master/actus-dictionary-states.json}}
}
@misc{ACTUS_Dictionary_Terms,
  author       = {ACTUS},
  title        = {ACTUS Dictionary Terms},
  year         = {2019},
  month        = Jun,
  howpublished = {\url{https://github.com/actusfrf/actus-dictionary/blob/master/actus-dictionary-terms.json}}
}
@misc{ACTUS_Taxonomy,
  author       = {ACTUS},
  title        = {ACTUS Taxonomy},
  year         = 2019,
  month        = Jun,
  howpublished = {\url{https://www.actusfrf.org/taxonomy}}
}
@misc{ACTUS_Techspecs,
  author       = {ACTUS},
  title        = {ACTUS Technical Specification},
  year         = {2018},
  month        = Nov,
  howpublished = {\url{https://www.actusfrf.org/techspecs}}
}
@misc{Algebraic_data_type,
  author       = {HaskellWiki},
  note         = {Online; accessed 30 April 2022},
  year         = {2020},
  month        = May,
  day          = 6,
  time         = {12:07},
  title        = {Algebraic data type},
  howpublished = {\url{https://wiki.haskell.org/Algebraic_data_type}}
}

@inproceedings{bhargavan:hal-01400469,
  title       = {{Formal Verification of Smart Contracts: Short Paper}},
  author      = {Bhargavan, Karthikeyan and Delignat-Lavaud, Antoine and Fournet, C{\'e}dric and Gollamudi, Anitha and Gonthier, Georges and Kobeissi, Nadim and Kulatova, Natalia and Rastogi, Aseem and Sibut-Pinote, Thomas and Swamy, Nikhil and Zanella-B{\'e}guelin, Santiago},
  url         = {https://hal.inria.fr/hal-01400469},
  booktitle   = {{ACM Workshop on Programming Languages and Analysis for Security}},
  address     = {Vienna, Austria},
  year        = {2016},
  month       = Oct,
  doi         = {10.1145/2993600.2993611},
  keywords    = {Cryptocurrencies ; Formal methods Computer science ; Formal verification},
  pdf         = {https://hal.inria.fr/hal-01400469/file/solidether.pdf},
  hal_id      = {hal-01400469},
  hal_version = {v1}
}
@misc{cardano_docs,
  author       = {IOHK},
  title        = {Documentation for the Cardano ecosystem},
  year         = {2015},
  howpublished = {\url{https://docs.cardano.org/}}
}

@misc{cardano_utxo_ledger,
  title  = {A Formal Specification of the Cardano Ledger},
  author = {Corduan, Jared and Vinogradova, Polina and Gudemann, Matthias},
  url    = {http://cardano-universe.com/wp-content/uploads/2019/02/ledger-spec.pdf},
  year   = {2019}
}

@misc{cardano_website,
  author       = {Cardano},
  title        = {Cardano Official Website},
  year         = {2019},
  howpublished = {\url{https://cardano.org/}}
}

@article{CASC_competition,
  author     = {Sutcliffe, Geoff},
  title      = {The CADE-21 Automated Theorem Proving System Competition},
  year       = {2008},
  issue_date = {January 2008},
  publisher  = {IOS Press},
  address    = {NLD},
  volume     = {21},
  number     = {1},
  issn       = {0921-7126},
  abstract   = {The CADE ATP system competition (CASC) is an annual evaluation of fully automatic, first order Automated Theorem Proving (ATP) systems. CASC-21 was the twelfth competition in the CASC series. Twenty ATP systems and system variants competed in the various competition and demonstration divisions. An outline of the competition design, and a commentated summary of the results, are presented.},
  journal    = {AI Commun.},
  month      = {jan},
  pages      = {71-81},
  doi        = {10.5555/1365980.1365989},
  numpages   = {11},
  keywords   = {Competition, automated theorem proving}
}

@book{concrete_semantics,
  author    = {Nipkow, Tobias and Klein, Gerwin},
  title     = {Concrete Semantics: With Isabelle/HOL},
  year      = {2014},
  isbn      = {3319105418},
  publisher = {Springer Publishing Company, Incorporated},
  abstract  = {Part I of this book is a practical introduction to working with the Isabelle proof assistant. It teaches you how to write functional programs and inductive definitions and how to prove properties about them in Isabelles structured proof language. Part II is an introduction to the semantics of imperative languages with an emphasis on applications like compilers and program analysers. The distinguishing feature is that all the mathematics has been formalised in Isabelle and much of it is executable. Part I focusses on the details of proofs in Isabelle; Part II can be read even without familiarity with Isabelles proof language, all proofs are described in detail but informally. The book teaches the reader the art of precise logical reasoning and the practical use of a proof assistant as a surgical tool for formal proofs about computer science artefacts. In this sense it represents a formal approach to computer science, not just semantics. The Isabelle formalisation, including the proofs and accompanying slides, are freely available online, and the book is suitable for graduate students, advanced undergraduate students, and researchers in theoretical computer science and logic.}
}

@book{fowler2010dsl,
  title     = {Domain-specific languages},
  author    = {Fowler, Martin},
  year      = {2010},
  publisher = {Pearson Education}
}

@inproceedings{history_of_Interactive_Theorem_Proving,
  title     = {History of Interactive Theorem Proving.},
  author    = {Harrison, John and Urban, Josef and Wiedijk, Freek},
  booktitle = {Computational Logic},
  volume    = {9},
  pages     = {135--214},
  year      = {2014},
  isbn      = {9780444516244},
  journal   = {Handbook of the History of Logic},
  doi       = {10.1016/B978-0-444-51624-4.50004-6}
}

@article{Hitchhiker_amd,
  author  = {Russinoff, David},
  year    = {1999},
  month   = {01},
  pages   = {75-125},
  title   = {A Mechanically Checked Proof of Correctness of the AMD K5 Floating Point Square Root Microcode},
  volume  = {14},
  journal = {Formal Methods in System Design},
  doi     = {10.1023/A:1008669628911}
}

@inproceedings{Hitchhiker_intel,
  author    = {Harrison, J.},
  booktitle = {18th Annual IEEE Symposium of Logic in Computer Science, 2003. Proceedings.},
  title     = {Formal verification at Intel},
  year      = {2003},
  volume    = {},
  number    = {},
  pages     = {45-54},
  doi       = {10.1109/LICS.2003.1210044}
}

@inproceedings{implementing_financial_contracts_on_blockchain,
  author    = {Lamela Seijas, Pablo
               and Nemish, Alexander
               and Smith, David
               and Thompson, Simon},
  editor    = {Bernhard, Matthew
               and Bracciali, Andrea
               and Camp, L. Jean
               and Matsuo, Shin'ichiro
               and Maurushat, Alana
               and R{\o}nne, Peter B.
               and Sala, Massimiliano},
  title     = {Marlowe: Implementing and Analysing Financial Contracts on Blockchain},
  booktitle = {Financial Cryptography and Data Security},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {496--511},
  abstract  = {Marlowe is a DSL for financial contracts. We describe the implementation of Marlowe on the Cardano blockchain, and the Marlowe Playground web-based development and simulation environment.},
  isbn      = {978-3-030-54455-3}
}

@book{ML_programming_language,
  author    = {Ullman, Jeffrey D.},
  title     = {Elements of ML Programming},
  year      = {1994},
  doi       = {10.5555/180894},
  isbn      = {0131848542},
  publisher = {Prentice-Hall, Inc.},
  address   = {USA}
}

@article{monotonicity_inference_for_hol,
  author   = {Blanchette, Jasmin Christian
              and Krauss, Alexander},
  title    = {Monotonicity Inference for Higher-Order Formulas},
  journal  = {Journal of Automated Reasoning},
  year     = {2011},
  month    = {Dec},
  day      = {01},
  volume   = {47},
  number   = {4},
  pages    = {369-398},
  abstract = {Formulas are often monotonic in the sense that satisfiability for a given domain of discourse entails satisfiability for all larger domains. Monotonicity is undecidable in general, but we devised three calculi that infer it in many cases for higher-order logic. The third calculus has been implemented in Isabelle's model finder Nitpick, where it is used both to prune the search space and to soundly interpret infinite types with finite sets, leading to dramatic speed and precision improvements.},
  issn     = {1573-0670},
  doi      = {10.1007/s10817-011-9234-1},
  url      = {https://doi.org/10.1007/s10817-011-9234-1}
}

@misc{nakamoto2008bitcoin,
  author = {Satoshi Nakamoto},
  title  = {Bitcoin: A Peer-to-Peer Electronic Cash System},
  year   = {2008},
  month  = {Dec},
  note   = {Accessed: 2015-07-01},
  url    = {https://bitcoin.org/bitcoin.pdf}
}

@book{plutus-smart-contracts,
  title        = {Plutus: Writing reliable smart contracts},
  author       = {Br{\"{u}}njes, Lars and  Vinogradova, Polina},
  year         = {2019},
  publisher    = {IOHK},
  url          = {\url{https://leanpub.com/plutus-smart-contracts}},
  howpublished = {\url{https://leanpub.com/plutus-smart-contracts}},
  abstract     = {This practical ebook is a guide to programming with the Plutus language for highly secure smart contracts on the Cardano blockchain, home of the ada cryptocurrency. Plutus is based on the Haskell functional programming language and comes complete with a full testing environment accessed via GitHub or any browser.
                  The ebook will help you get to grips with using smart contracts on a blockchain by providing real-life examples and functional sample code. Plutus: Writing Reliable Smart Contracts is the first ebook about this new and exciting language and is written by experts from IOHK, the developers of Cardano and ada.               
                  This ebook is concise and focused and uses sample scenarios to help the reader grasp the concepts of this new language. The pitch and flow of this book makes it appealing and is it easy to navigate through the samples which get progressively more complex.}
}

@incollection{pof_ouroboros,
  author     = {Aggelos Kiayias and Alexander Russell and Bernardo David and Roman Oliynykov},
  address    = {Cham},
  title      = {Ouroboros: {A} {Provably} {Secure} {Proof}-of-{Stake} {Blockchain} {Protocol}},
  volume     = {10401},
  isbn       = {978-3-319-63687-0 978-3-319-63688-7},
  shorttitle = {Ouroboros},
  url        = {http://link.springer.com/10.1007/978-3-319-63688-7_12},
  abstract   = {We present {\textquotedblleft}Ouroboros,{\textquotedblright} the first blockchain protocol based on proof of stake with rigorous security guarantees. We establish security properties for the protocol comparable to those achieved by the bitcoin blockchain protocol. As the protocol provides a {\textquotedblleft}proof of stake{\textquotedblright} blockchain discipline, it offers qualitative efficiency advantages over blockchains based on proof of physical resources (e.g., proof of work). We also present a novel reward mechanism for incentivizing proof of stake protocols and we prove that, given this mechanism, honest behavior is an approximate Nash equilibrium, thus neutralizing attacks such as selfish mining. We also present initial evidence of the practicality of our protocol in real world settings by providing experimental results on transaction confirmation and processing.},
  language   = {en},
  urldate    = {2020-07-08},
  booktitle  = {Advances in {Cryptology} {\textendash} {CRYPTO} 2017},
  publisher  = {Springer International Publishing},
  year       = {2017},
  doi        = {10.1007/978-3-319-63688-7_12},
  note       = {Series Title: Lecture Notes in Computer Science},
  pages      = {357--388}
}

@manual{prog-prove-isabelle,
  title     = {Programming and proving in Isabelle/HOL},
  author    = {Nipkow, Tobias},
  booktitle = {Technical report, University of Cambridge},
  url       = {https://isabelle.in.tum.de/doc/prog-prove.pdf},
  year      = {2013}
}

@inproceedings{proof_and_disproof,
  title        = {Automatic proof and disproof in Isabelle/HOL},
  author       = {Blanchette, Jasmin Christian and Bulwahn, Lukas and Nipkow, Tobias},
  booktitle    = {International Symposium on Frontiers of Combining Systems},
  pages        = {12--27},
  year         = {2011},
  month        = {10},
  organization = {Springer},
  isbn         = {978-3-642-24363-9},
  doi          = {10.1007/978-3-642-24364-6_2}
}

@article{proof_processing_Isabelle,
  author  = {Wenzel, Makarius},
  year    = {2012},
  month   = {09},
  pages   = {101-114},
  title   = {Asynchronous Proof Processing with Isabelle/Scala and Isabelle/jEdit},
  volume  = {285},
  journal = {Electronic Notes in Theoretical Computer Science},
  doi     = {10.1016/j.entcs.2012.06.009}
}

@inproceedings{quickcheck_haskell,
  author    = {Claessen, Koen and Hughes, John},
  title     = {QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs},
  year      = {2000},
  isbn      = {1581132026},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/351240.351266},
  doi       = {10.1145/351240.351266},
  abstract  = {Quick Check is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are described as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffices to obtain good coverage of the definition under test.},
  booktitle = {Proceedings of the Fifth ACM SIGPLAN International Conference on Functional Programming},
  pages     = {268-279},
  numpages  = {12},
  series    = {ICFP '00}
}

@inproceedings{sledgehammer_judgement_day,
  author    = {B{\"o}hme, Sascha
               and Nipkow, Tobias},
  editor    = {Giesl, J{\"u}rgen
               and H{\"a}hnle, Reiner},
  title     = {Sledgehammer: Judgement Day},
  booktitle = {Automated Reasoning},
  year      = {2010},
  doi       = {10.1007/978-3-642-14203-1_9},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {107--121},
  abstract  = {Sledgehammer, a component of the interactive theorem prover Isabelle, finds proofs in higher-order logic by calling the automated provers for first-order logic E, SPASS and Vampire. This paper is the largest and most detailed empirical evaluation of such a link to date. Our test data consists of 1240 proof goals arising in 7 diverse Isabelle theories, thus representing typical Isabelle proof obligations. We measure the effectiveness of Sledgehammer and many other parameters such as run time and complexity of proofs. A facility for minimizing the number of facts needed to prove a goal is presented and analyzed.},
  isbn      = {978-3-642-14203-1}
}

@techreport{SMT-LIB,
  title       = {The smt-lib standard: Version 1.2},
  author      = {Ranise, Silvio and Tinelli, Cesare},
  year        = {2006},
  institution = {Technical report, Department of Computer Science, The University of Iowa~...}
}

@inproceedings{standardized_crypto_loans,
  title     = {Standardized crypto-loans on the Cardano blockchain},
  author    = {Kondratiuk, Dmytro and Seijas, Pablo Lamela and Nemish, Alexander and Thompson, Simon},
  booktitle = {5th Workshop on Trusted Smart Contracts, Financial Cryptography and Data Security 2021},
  year      = {2021}
}


@article{tableau_provers,
  author    = {Lawrence C. Paulson},
  title     = {Generic automatic proof tools},
  booktitle = {Automated reasoning and its applications: essays in
               honor of {Larry Wos}},
  year      = {1997},
  isbn      = {0-262-22055-5},
  pages     = {23--47},
  journal   = {arXiv preprint cs/9711106},
  publisher = {MIT Press},
  address   = {Cambridge, MA, USA}
}

@inbook{The_Extended_UTXO_Model,
  author = {Chakravarty, Manuel and Chapman, James and MacKenzie, Kenneth and Melkonian, Orestis and Jones, Michael and Wadler, Philip},
  year   = {2020},
  month  = {08},
  pages  = {525-539},
  title  = {The Extended UTXO Model},
  isbn   = {978-3-030-54454-6},
  doi    = {10.1007/978-3-030-54455-3_37}
}

@misc{Translating_and_Unifying_UTXO-based,
  author       = {Joachim Zahnentferner},
  title        = {Chimeric Ledgers: Translating and Unifying UTXO-based and Account-based Cryptocurrencies},
  howpublished = {Cryptology ePrint Archive, Report 2018/262},
  year         = {2018},
  note         = {\url{https://ia.cr/2018/262}}
}

@article{UTxO_Lars,
  author     = {Lars Br{\"{u}}njes and
                Murdoch James Gabbay},
  title      = {UTxO- vs account-based smart contract blockchain programming paradigms},
  journal    = {CoRR},
  volume     = {abs/2003.14271},
  year       = {2020},
  url        = {https://arxiv.org/abs/2003.14271},
  eprinttype = {arXiv},
  eprint     = {2003.14271},
  timestamp  = {Thu, 02 Apr 2020 15:34:08 +0200},
  biburl     = {https://dblp.org/rec/journals/corr/abs-2003-14271.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Z3,
  author    = {de Moura, Leonardo
               and Bj{\o}rner, Nikolaj},
  editor    = {Ramakrishnan, C. R.
               and Rehof, Jakob},
  title     = {Z3: An Efficient SMT Solver},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {2008},
  doi       = {10.1007/978-3-540-78800-3_24},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {337--340},
  abstract  = {Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.},
  isbn      = {978-3-540-78800-3}
}